plugins {
	id 'java'
	id 'maven-publish'
	id 'signing'
	id 'io.codearte.nexus-staging' version '0.21.0'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

group = 'com.github.acidelk'
description = 'Small library for error handling in spring webflux based microservices'
version = '0.1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
}

dependencyManagement {
	imports {
		mavenBom("org.springframework.boot:spring-boot-parent:2.1.2.RELEASE")
	}
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok:1.18.4'

	compileOnly 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'com.fasterxml.jackson.core:jackson-annotations:2.9.5'
	compileOnly 'org.projectlombok:lombok:1.18.4'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
	from javadoc
	archiveClassifier = 'javadoc'
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId = project.name
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom {
				name = project.name
				description = 'Small library for error handling in spring webflux based microservices'
				url = 'https://github.com/acidelk/error-handling'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'acidelk'
						name = 'Anton Fedosov'
						email = 'fed.guman@gmail.com'
					}
				}
				scm {
					connection = 'https://github.com/acidelk/error-handling.git'
					developerConnection = 'git@github.com:acidelk/error-handling.git'
					url = 'https://github.com/acidelk/error-handling'
				}
			}
		}
	}
	repositories {
		maven {
			credentials {
				username = project.findProperty('nexus_user')
				password = project.findProperty('nexus_password')
			}
			url = getMavenRepo()
		}
	}
}

signing {
	sign publishing.publications.maven
}

nexusStaging {
	username = project.findProperty('nexus_user')
	password = project.findProperty('nexus_password')
}

def getMavenRepo() {
	def snapshotsRepo = 'https://oss.sonatype.org/content/repositories/snapshots'
	def stagingRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
	return version.endsWith('SNAPSHOT') ? snapshotsRepo : stagingRepo
}
